"""
Lido
"""
type LidoConfig @entity {
  id: ID!

  insuranceFund: String
  oracle: String
  treasury: String

  isStopped: Boolean!
  isStakingPaused: Boolean!

  maxStakeLimit: BigInt!
  stakeLimitIncreasePerBlock: BigInt!

  elRewardsVault: String
  elRewardsWithdrawalLimitPoints: BigInt!

  withdrawalCredentials: String!
  wcSetBy: String
  lidoLocator: String
}

type LidoTransfer @entity {
  id: ID!

  from: String!
  to: String!
  value: BigInt!

  shares: BigInt!
  sharesBeforeDecrease: BigInt
  sharesAfterDecrease: BigInt
  sharesBeforeIncrease: BigInt
  sharesAfterIncrease: BigInt

  # mintWithoutSubmission: Boolean

  totalPooledEther: BigInt!
  totalShares: BigInt!

  balanceAfterDecrease: BigInt
  balanceAfterIncrease: BigInt

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type LidoApproval @entity {
  id: ID!

  owner: String!
  spender: String!
  value: BigInt!
}

# type LidoWithdrawalCredential @entity {
#   id: String!

#   withdrawalCredentials: String!
#   setBy: String

#   block: BigInt!
#   blockTime: BigInt!
#   transactionHash: String!
#   logIndex: BigInt!
# }

type LidoSubmission @entity {
  id: ID!

  sender: String!
  amount: BigInt!
  referral: String!

  shares: BigInt!
  sharesBefore: BigInt!
  sharesAfter: BigInt!

  totalPooledEtherBefore: BigInt!
  totalPooledEtherAfter: BigInt!
  totalSharesBefore: BigInt!
  totalSharesAfter: BigInt!

  balanceAfter: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type NodeOperatorFees @entity {
  id: ID!
  totalReward: TotalReward!

  address: String!
  fee: BigInt!
}

# type NodeOperatorReward @entity {
#   id: String!
#   totalReward: TotalReward!
#   address: String!
#   fee: BigInt!
#   shares: BigInt!
# }

type NodeOperatorsShares @entity {
  id: ID!
  totalReward: TotalReward!

  address: String!
  shares: BigInt!
}

type Totals @entity {
  id: ID!

  totalPooledEther: BigInt!
  totalShares: BigInt!
}

type Stats @entity {
  id: ID!

  uniqueHolders: BigInt!
  uniqueAnytimeHolders: BigInt!
  lastOracleCompletedId: BigInt!
}

type Shares @entity {
  id: ID!

  shares: BigInt!
}

type Holder @entity {
  id: ID!

  address: String!
  hasBalance: Boolean!
}

type CurrentFees @entity {
  id: ID!

  feeBasisPoints: BigInt!
  treasuryFeeBasisPoints: BigInt!
  insuranceFeeBasisPoints: BigInt!
  operatorsFeeBasisPoints: BigInt!
}

# type SharesTransfer @entity {
#   id: ID!

#   from: String!
#   sharesValue: BigInt!
#   to: String!
# }

type SharesBurn @entity {
  id: ID!

  account: String!
  postRebaseTokenAmount: BigInt!
  preRebaseTokenAmount: BigInt!
  sharesAmount: BigInt!
}

"""
Oracle
"""
type OracleConfig @entity {
  id: ID!

  quorum: BigInt!
  contractVersion: BigInt!
  allowedBeaconBalanceAnnualRelativeIncrease: BigInt!
  allowedBeaconBalanceRelativeDecrease: BigInt!

  epochsPerFrame: BigInt!
  slotsPerEpoch: BigInt!
  secondsPerSlot: BigInt!
  genesisTime: BigInt!

  beaconReportReceiver: String!
}

type OracleReport @entity {
  "v2 oracle report refSlot = ID"
  id: ID!

  totalReward: TotalReward!
  hash: String!
  itemsProcessed: BigInt!
  itemsCount: BigInt!
}

type OracleCompleted @entity {
  id: ID!

  epochId: BigInt!
  beaconBalance: BigInt!
  beaconValidators: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type TotalReward @entity {
  "transactionHash"
  id: ID!

  "Total user rewards"
  totalRewards: BigInt!
  "Total user rewards + fees"
  totalRewardsWithFees: BigInt!

  "Fees received via validator MEV"
  mevFee: BigInt!

  "Fee basis points eg fractions of total fees"
  feeBasis: BigInt!
  treasuryFeeBasisPoints: BigInt!
  insuranceFeeBasisPoints: BigInt!
  operatorsFeeBasisPoints: BigInt!

  "Fees and leftover dust after rounding"
  totalFee: BigInt!
  nodeOperatorFees: [NodeOperatorFees!] @derivedFrom(field: "totalReward")
  insuranceFee: BigInt!
  operatorsFee: BigInt!
  treasuryFee: BigInt!
  dust: BigInt!

  "Total shares that were minted for distribution"
  shares2mint: BigInt!

  "Shares distributed to each destination"
  sharesToTreasury: BigInt!
  sharesToInsuranceFund: BigInt!
  sharesToOperators: BigInt!
  nodeOperatorsShares: [NodeOperatorsShares!] @derivedFrom(field: "totalReward")
  dustSharesToTreasury: BigInt!

  "State of the pool before and after rewards"
  totalPooledEtherBefore: BigInt!
  totalPooledEtherAfter: BigInt!
  totalSharesBefore: BigInt!
  totalSharesAfter: BigInt!

  "Data for easy APR calculations"
  # postTotalPooledEther: BigInt
  # preTotalPooledEther: BigInt
  timeElapsed: BigInt!
  # totalShares: BigInt

  "Raw APR from validator balances"
  aprRaw: BigDecimal!
  "Time-compensated APR eg account for a missed day of rewards between reports"
  aprBeforeFees: BigDecimal!
  "User APR after fees and time correction"
  apr: BigDecimal!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  transactionIndex: BigInt!
  logIndex: BigInt!
}

type OracleMember @entity {
  id: ID!

  member: String!
  removed: Boolean!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type OracleExpectedEpoch @entity {
  id: ID!

  epochId: BigInt!
}

type BeaconReport @entity {
  id: ID!

  epochId: BigInt!
  beaconBalance: BigInt!
  beaconValidators: BigInt!
  caller: String!
}

# """
# NodeOperatorsRegistry
# """

type NodeOperatorSigningKey @entity {
  id: ID!

  operatorId: BigInt!
  pubkey: String!
  removed: Boolean!

  operator: NodeOperator!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type NodeOperator @entity {
  id: ID!

  name: String!
  rewardAddress: String!
  stakingLimit: BigInt!
  active: Boolean!
  totalStoppedValidators: BigInt
  totalKeysTrimmed: BigInt!
  nonce: BigInt!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type NodeOperatorKeysOpIndex @entity {
  id: ID!

  index: BigInt!
}

"""
Voting
"""
type VotingConfig @entity {
  id: ID!

  supportRequiredPct: BigInt!
  minAcceptQuorumPct: BigInt!
  voteTime: BigInt!
  objectionPhaseTime: BigInt!
}

type Voting @entity {
  id: ID!

  index: Int!
  creator: String!
  metadata: String!
  executed: Boolean!

  votes: [Vote!]! @derivedFrom(field: "voting")
  objections: [VotingObjection!]! @derivedFrom(field: "voting")

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type Vote @entity {
  id: ID!

  voting: Voting!
  voter: String!
  supports: Boolean!
  stake: BigInt!
}

type VotingObjection @entity {
  id: ID!

  voting: Voting!
  voter: String!
  stake: BigInt!
}

"""
EasyTrack
"""
type Motion @entity {
  id: ID!

  creator: String!
  evmScriptFactory: String!
  duration: BigInt
  startDate: BigInt!
  snapshotBlock: BigInt!
  objectionsAmount: BigInt!
  objectionsAmountPct: BigInt!
  objectionsThreshold: BigInt
  evmScriptHash: String!
  evmScriptCalldata: String!
  status: String!
  enactedAt: BigInt
  canceledAt: BigInt
  rejectedAt: BigInt

  objections: [Objection!] @derivedFrom(field: "motion")

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type EasyTrackConfig @entity {
  id: ID!

  evmScriptExecutor: String!
  motionDuration: BigInt!
  motionsCountLimit: BigInt!
  objectionsThreshold: BigInt!
  isPaused: Boolean!
}

type Role @entity {
  id: ID!

  role: String!
  address: String!
  creator: String!
  isActive: Boolean!
}

type EVMScriptFactory @entity {
  id: ID!

  address: String!
  permissions: String!
  isActive: Boolean!
}

type Objection @entity {
  id: ID!

  motionId: BigInt!
  objector: String!
  weight: BigInt!

  motion: Motion!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

"""
Lido DAO
"""
type AppVersion @entity {
  id: ID!
  major: Int!
  minor: Int!
  patch: Int!
  impl: String!

  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

# WithdrawalQueue

type WithdrawalQueueConfig @entity {
  id: ID!

  isBunkerMode: Boolean!
  bunkerModeSince: BigInt!
  contractVersion: BigInt!
  isPaused: Boolean!
  pauseDuration: BigInt!
}

type WithdrawalClaimed @entity {
  id: ID!
  requestId: BigInt! # uint256
  owner: String! # address
  receiver: String! # address
  amountOfETH: BigInt! # uint256
  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WithdrawalRequested @entity {
  id: ID!
  requestId: BigInt! # uint256
  requestor: String! # address
  owner: String! # address
  amountOfStETH: BigInt! # uint256
  amountOfShares: BigInt! # uint256
  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}

type WithdrawalsFinalized @entity {
  id: ID!
  from: BigInt! # uint256
  to: BigInt! # uint256
  amountOfETHLocked: BigInt! # uint256
  sharesToBurn: BigInt! # uint256
  timestamp: BigInt! # uint256
  block: BigInt!
  blockTime: BigInt!
  transactionHash: String!
  logIndex: BigInt!
}
